# Name = 1c_src-orcl-oracle-cdc-consultants.properties
# Owner = Saurav Mitra
# Source = Oracle
# Connector = OracleCdcSourceConnector
# Scenario = CDC Single Table (CONSULTANTS) to Kafka Topic (ORCL-CDC-CONSULTANTS);
# bin/kafka-topics --create --topic oracle-redo-log-topic --bootstrap-server ip-10-0-1-20.us-west-2.compute.internal:9092 --replication-factor 1 --partitions 1 --config cleanup.policy=delete --config retention.ms=120960000

name = src-orcl-oracle-cdc-consultants
connector.class = io.confluent.connect.oracle.cdc.OracleCdcSourceConnector
oracle.server = 10.0.1.100
oracle.port = 1521
oracle.sid = XE
oracle.username = orcl_user
oracle.password = Pa55w0rd1234
table.inclusion.regex = XE[.]ORCL_USER[.](CONSULTANTS)
numeric.mapping = best_fit
start.from = snapshot
key.converter = org.apache.kafka.connect.json.JsonConverter
key.converter.schemas.enable = false
# value.converter = org.apache.kafka.connect.json.JsonConverter
# value.converter.schemas.enable = false
transforms = createKey,extractInt
transforms.createKey.type = org.apache.kafka.connect.transforms.ValueToKey
transforms.createKey.fields = ID
transforms.extractInt.type = org.apache.kafka.connect.transforms.ExtractField$Key
transforms.extractInt.field = ID
tasks.max = 3
connection.pool.max.size = 20
confluent.topic.bootstrap.servers = ip-10-0-1-20.us-west-2.compute.internal:9092,ip-10-0-1-21.us-west-2.compute.internal:9092,ip-10-0-1-22.us-west-2.compute.internal:9092
bootstrap.servers = ip-10-0-1-20.us-west-2.compute.internal:9092,ip-10-0-1-21.us-west-2.compute.internal:9092,ip-10-0-1-22.us-west-2.compute.internal:9092
redo.log.topic.name = oracle-redo-log-topic
table.topic.name.template = ORCL-CDC-${tableName}
lob.topic.name.template = ORCL-CDC-${tableName}-${columnName}

topic.creation.groups = redo
topic.creation.redo.include = oracle-redo-log-topic
topic.creation.redo.replication.factor = 2
topic.creation.redo.partitions = 1
topic.creation.redo.cleanup.policy = delete
topic.creation.redo.retention.ms = 1209600000
topic.creation.default.replication.factor = 2
topic.creation.default.partitions = 3
topic.creation.default.cleanup.policy = compact



# SASL/SSL

confluent.topic.replication.factor = 3
redo.log.row.fetch.size = 1
topic.creation.enable = true
auto.create.topics.enable = true

redo.log.consumer.bootstrap.servers = ip-10-0-1-20.us-west-2.compute.internal:9092,ip-10-0-1-21.us-west-2.compute.internal:9092,ip-10-0-1-22.us-west-2.compute.internal:9092
redo.log.consumer.sasl.jaas.config = org.apache.kafka.common.security.plain.PlainLoginModule required username="kafka_connect" password=${securepass:/var/ssl/private/security.properties:connect-distributed.properties/consumer.sasl.jaas.config/org.apache.kafka.common.security.plain.PlainLoginModule/password};
redo.log.consumer.sasl.mechanism = PLAIN
redo.log.consumer.security.protocol = SASL_SSL
redo.log.consumer.ssl.key.password = ${securepass:/var/ssl/private/security.properties:connect-distributed.properties/consumer.ssl.key.password}
redo.log.consumer.ssl.keystore.location = /var/ssl/private/kafka_connect.keystore.jks
redo.log.consumer.ssl.keystore.password = ${securepass:/var/ssl/private/security.properties:connect-distributed.properties/consumer.ssl.keystore.password}
redo.log.consumer.ssl.truststore.location = /var/ssl/private/kafka_connect.truststore.jks
redo.log.consumer.ssl.truststore.password = ${securepass:/var/ssl/private/security.properties:connect-distributed.properties/consumer.ssl.truststore.password}

# redo.log.producer.bootstrap.servers = ip-10-0-1-20.us-west-2.compute.internal:9092,ip-10-0-1-21.us-west-2.compute.internal:9092,ip-10-0-1-22.us-west-2.compute.internal:9092
# redo.log.producer.sasl.jaas.config = org.apache.kafka.common.security.plain.PlainLoginModule required username="kafka_connect" password=${securepass:/var/ssl/private/security.properties:connect-distributed.properties/producer.sasl.jaas.config/org.apache.kafka.common.security.plain.PlainLoginModule/password};
# redo.log.producer.sasl.mechanism = PLAIN
# redo.log.producer.security.protocol = SASL_SSL
# redo.log.producer.ssl.key.password = ${securepass:/var/ssl/private/security.properties:connect-distributed.properties/producer.ssl.key.password}
# redo.log.producer.ssl.keystore.location = /var/ssl/private/kafka_connect.keystore.jks
# redo.log.producer.ssl.keystore.password = ${securepass:/var/ssl/private/security.properties:connect-distributed.properties/producer.ssl.keystore.password}
# redo.log.producer.ssl.truststore.location = /var/ssl/private/kafka_connect.truststore.jks
# redo.log.producer.ssl.truststore.password = ${securepass:/var/ssl/private/security.properties:connect-distributed.properties/producer.ssl.truststore.password}

confluent.topic.bootstrap.servers = ip-10-0-1-20.us-west-2.compute.internal:9092,ip-10-0-1-21.us-west-2.compute.internal:9092,ip-10-0-1-22.us-west-2.compute.internal:9092
confluent.topic.sasl.jaas.config = org.apache.kafka.common.security.plain.PlainLoginModule required username="kafka_connect" password=${securepass:/var/ssl/private/security.properties:connect-distributed.properties/sasl.jaas.config/org.apache.kafka.common.security.plain.PlainLoginModule/password};
confluent.topic.sasl.mechanism = PLAIN
confluent.topic.security.protocol = SASL_SSL
confluent.topic.ssl.key.password = ${securepass:/var/ssl/private/security.properties:connect-distributed.properties/ssl.key.password}
confluent.topic.ssl.keystore.location = /var/ssl/private/kafka_connect.keystore.jks
confluent.topic.ssl.keystore.password = ${securepass:/var/ssl/private/security.properties:connect-distributed.properties/ssl.keystore.password}
confluent.topic.ssl.truststore.location = /var/ssl/private/kafka_connect.truststore.jks
confluent.topic.ssl.truststore.password = ${securepass:/var/ssl/private/security.properties:connect-distributed.properties/ssl.truststore.password}


value.converter = io.confluent.connect.avro.AvroConverter
value.converter.schema.registry.url = https://ip-10-0-1-30.us-west-2.compute.internal:8081
value.converter.schema.registry.ssl.key.password = ${securepass:/var/ssl/private/security.properties:connect-distributed.properties/value.converter.schema.registry.ssl.key.password}
value.converter.schema.registry.ssl.keystore.location = /var/ssl/private/kafka_connect.keystore.jks
value.converter.schema.registry.ssl.keystore.password = ${securepass:/var/ssl/private/security.properties:connect-distributed.properties/value.converter.schema.registry.ssl.keystore.password}
value.converter.schema.registry.ssl.truststore.location = /var/ssl/private/kafka_connect.truststore.jks
value.converter.schema.registry.ssl.truststore.password = ${securepass:/var/ssl/private/security.properties:connect-distributed.properties/value.converter.schema.registry.ssl.truststore.password}
