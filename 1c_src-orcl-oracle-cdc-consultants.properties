# Name = 1c_src-orcl-oracle-cdc-consultants.properties
# Owner = Saurav Mitra
# Source = Oracle
# Connector = OracleCdcSourceConnector
# Scenario = CDC Single Table (CONSULTANTS) to Kafka Topic (ORCL-CDC-ORCLPDB1-CONSULTANTS);
# bin/kafka-topics --create --topic oracle-redo-log-topic --bootstrap-server ip-10-0-1-20.us-west-2.compute.internal:9092 --replication-factor 1 --partitions 1 --config cleanup.policy=delete --config retention.ms=120960000

name = src-orcl-oracle-cdc-consultants
connector.class = io.confluent.connect.oracle.cdc.OracleCdcSourceConnector
oracle.server = 10.0.1.100
oracle.port = 1521
oracle.sid = ORCLCDB
oracle.pdb.name = ORCLPDB1
oracle.username = C##MYUSER
oracle.password = Pa55w0rd1234
table.inclusion.regex = ORCLPDB1[.]ORCL_USER[.](CONSULTANTS)
table.exclusion.regex = 
numeric.mapping = best_fit
start.from = snapshot

connection.pool.max.size = 20
max.batch.size = 100
snapshot.row.fetch.size = 1
auto.create.topics.enable = true

table.topic.name.template = ORCL-CDC-${databaseName}-${tableName}
lob.topic.name.template = ORCL-CDC-${databaseName}-${tableName}-${columnName}
confluent.topic.replication.factor = 1
redo.log.topic.name = oracle-redo-log-topic
redo.log.consumer.fetch.min.bytes = 1
redo.log.row.fetch.size = 1
topic.creation.redo.include = oracle-redo-log-topic

bootstrap.servers = ip-10-0-1-20.us-west-2.compute.internal:9092,ip-10-0-1-21.us-west-2.compute.internal:9092,ip-10-0-1-22.us-west-2.compute.internal:9092
confluent.topic.bootstrap.servers = ip-10-0-1-20.us-west-2.compute.internal:9092,ip-10-0-1-21.us-west-2.compute.internal:9092,ip-10-0-1-22.us-west-2.compute.internal:9092
redo.log.consumer.bootstrap.servers = ip-10-0-1-20.us-west-2.compute.internal:9092,ip-10-0-1-21.us-west-2.compute.internal:9092,ip-10-0-1-22.us-west-2.compute.internal:9092

topic.creation.enable = true
topic.creation.groups = redo
topic.creation.redo.replication.factor = 1
topic.creation.redo.partitions = 1
topic.creation.redo.cleanup.policy = delete
topic.creation.redo.retention.ms = 1209600000
topic.creation.default.replication.factor = 1
topic.creation.default.partitions = 1
topic.creation.default.cleanup.policy = compact

key.converter = org.apache.kafka.connect.storage.StringConverter
key.converter.schemas.enable = false
value.converter = io.confluent.connect.avro.AvroConverter
value.converter.schemas.enable = true
value.converter.schema.registry.url = https://ip-10-0-1-30.us-west-2.compute.internal:8081

tasks.max = 1


# SASL/SSL
confluent.topic.sasl.jaas.config = org.apache.kafka.common.security.plain.PlainLoginModule required username="kafka_connect" password="kafka_connect-secret";
confluent.topic.sasl.mechanism = PLAIN
confluent.topic.security.protocol = SASL_SSL
confluent.topic.ssl.key.password = confluentkeystorestorepass
confluent.topic.ssl.keystore.location = /var/ssl/private/kafka_connect.keystore.jks
confluent.topic.ssl.keystore.password = confluentkeystorestorepass
confluent.topic.ssl.truststore.location = /var/ssl/private/kafka_connect.truststore.jks
confluent.topic.ssl.truststore.password = confluenttruststorepass

redo.log.consumer.sasl.jaas.config = org.apache.kafka.common.security.plain.PlainLoginModule required username="kafka_connect" password="kafka_connect-secret";
redo.log.consumer.sasl.mechanism = PLAIN
redo.log.consumer.security.protocol = SASL_SSL
redo.log.consumer.ssl.key.password = confluentkeystorestorepass
redo.log.consumer.ssl.keystore.location = /var/ssl/private/kafka_connect.keystore.jks
redo.log.consumer.ssl.keystore.password = confluentkeystorestorepass
redo.log.consumer.ssl.truststore.location = /var/ssl/private/kafka_connect.truststore.jks
redo.log.consumer.ssl.truststore.password = confluenttruststorepass

value.converter.schema.registry.ssl.key.password = confluentkeystorestorepass
value.converter.schema.registry.ssl.keystore.location = /var/ssl/private/kafka_connect.keystore.jks
value.converter.schema.registry.ssl.keystore.password = confluentkeystorestorepass
value.converter.schema.registry.ssl.truststore.location = /var/ssl/private/kafka_connect.truststore.jks
value.converter.schema.registry.ssl.truststore.password = confluenttruststorepass
